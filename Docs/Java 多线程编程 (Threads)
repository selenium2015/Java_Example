Java 多线程编程 (Threads)

一个多线程程序包含两个或多个能并发运行的部分。
程序的每一部分都称作一个线程，并且每个线程定义了一个独立的执行路径。
多线程是多任务的一种特别的形式。多线程比多任务需要更小的开销。

进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。
一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守候线程都结束运行后才能结束。
 多线程能满足程序员编写非常有效率的程序来达到充分利用CPU的目的，因为CPU的空闲时间能够保持在最低限度。
 
一个线程的生命周 期
    新状态: 一个新产生的线程从新状态开始了它的生命周期。它保持这个状态直到程序start这个线程。
    运行状态:当一个新状态的线程被start以后，线程就变成可运行状态，一个线程在此状态下被认为是开始执行其任务
    就绪状态:当一个线程等待另外一个线程执行一个任务的时候，该线程就进入就绪状态。当另一个线程给就绪状态的线程发送信号时，该线程才重新切换到运行状态。
    休眠状态: 由于一个线程的时间片用完了，该线程从运行状态进入休眠状态。当时间间隔到期或者等待的时间发生了，该状态的线程切换到运行状态。
    终止状态: 一个运行状态的线程完成任务或者其他终止条件发生，该线程就切换到终止状态。
    
线程的优先级
 每一个Java线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。
 Java优先级在MIN_PRIORITY（1）和MAX_PRIORITY（10）之间的范围内。默认情况下，每一个线程都会分配一个优先级NORM_PRIORITY（5）。  
 
 具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器时间。然而，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。
 
 
  创建一个线程
  Java提供了两种创建线程方法：
    通过实现Runable接口；
    通过继承Thread类本身。   
    

 通过实现Runnable接口来创建线程
 创建一个线程，最简单的方法是创建一个实现Runnable接口的类。
  为了实现Runnable，一个类只需要执行一个方法调用run()，声明如下：public void run()
   你可以重写该方法，重要的是理解的run()可以调用其他方法，使用其他类，并声明变量，就像主线程一样。
 在创建一个实现Runnable接口的类之后，你可以在类中实例化一个线程对象。	
  Thread定义了几个构造方法，下面的这个是我们经常使用的：
  	Thread(Runnable threadOb,String threadName);
  	
 这里，threadOb 是一个实现Runnable 接口的类的实例，并且 threadName指定新线程的名字。
  新线程创建之后，你调用它的start()方法它才会运行。void start();
  

 通过继承Thread来创建线程
  创建一个线程的第二种方法是创建一个新的类，该类继承Thread类，然后创建一个该类的实例。
   继承类必须重写run()方法，该方法是新线程的入口点。它也必须调用start()方法才能执行。


线程的几个主要概念: 
 在多线程编程时，你需要了解以下几个概念：
    线程同步
    线程间通信
    线程死锁
    线程控制：挂起、停止和恢复      
    

多线程的使用
 有效利用多线程的关键是理解程序是并发执行而不是串行执行的。例如：程序中有两个子系统需要并发执行，这时候就需要利用多线程编程。
通过对多线程的使用，可以编写出非常高效的程序。不过请注意，如果你创建太多的线程，程序执行的效率实际上是降低了，而不是提升了。
请记住，上下文的切换开销也很重要，如果你创建了太多的线程，CPU花费在上下文的切换的时间将多于执行程序的时间！     	   


















    

 