Java 网络编程(Network programming)

 网络编程是指编写运行在多个设备（计算机）的程序，这些设备都通过网络连接起来。
 java.net包中J2SE的API包含有类和接口，它们提供低层次的通信细节。你可以直接使用这些类和接口，来专注于解决问题，而不用关注通信细节。
 
  java.net包中提供了两种常见的网络协议的支持：  
    TCP： TCP是传输控制协议的缩写，它保障了两个应用程序之间的可靠通信。通常用于互联网协议，被称TCP / IP。
    UDP:UDP是用户数据报协议的缩写，一个无连接的协议。提供了应用程序之间要发送的数据的数据包。
    
    
============    
 Socket 编程: 这是使用最广泛的网络概念
  套接字使用TCP提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。
 当连接建立时，服务器会创建一个Socket对象。客户端和服务器现在可以通过对Socket对象的写入和读取来进行进行通信。
  java.net.Socket类代表一个套接字，并且java.net.ServerSocket类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。
  
 以下步骤在两台计算机之间使用套接字建立TCP连接时会出现： 
    服务器实例化一个ServerSocket对象，表示通过服务器上的端口通信。
    服务器调用 ServerSocket类 的accept（）方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。
    服务器正在等待时，一个客户端实例化一个Socket对象，指定服务器名称和端口号来请求连接。
  Socket类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个Socket对象能够与服务器进行通信。
    在服务器端，accept()方法返回服务器上一个新的socket引用，该socket连接到客户端的socket。
    
   连接建立后，通过使用I/O流在进行通信。每一个socket都有一个输出流和一个输入流。客户端的输出流连接到服务器端的输入流，而客户端的输入流连接到服务器端的输出流。 
   TCP是一个双向的通信协议，因此数据可以通过两个数据流在同一时间发送.
   
===========
ServerSocket类    
  ServerSocket类有四个构造方法：
   创建非绑定服务器套接字。 如果ServerSocket构造方法没有抛出异常，就意味着你的应用程序已经成功绑定到指定的端口，并且侦听客户端请求。 
   
   
   
=============
 Socket 类的方法   
 java.net.Socket类代表客户端和服务器都用来互相沟通的套接字。
 客户端要获取一个Socket对象通过实例化 ，而 服务器获得一个Socket对象则通过accept()方法的返回值。 
 Socket类有五个构造方法.
 当Socket构造方法返回，并没有简单的实例化了一个Socket对象，它实际上会尝试连接到指定的服务器和端口。
 
 客户端和服务器端都有一个Socket对象，所以无论客户端还是服务端都能够调用这些方法。 
 
 
 
===============
 InetAddress 类的方法 
 
 这个类表示互联网协议(IP)地址。
 
  
 
 
 ============   
URL 处理
	URL（Uniform Resource Locator）中文名为统一资源定位符
URL可以分为如下几个部分:
	protocol://host:port/path?query#ref	
	
 URL 类方法
 	 URLConnection openConnection()//打开一个URL连接，并运行客户端访问资源。
 	 ...

URLConnections 类方法
	 InputStream getInputStream()//返回URL的输入流，用于读取资源
	 OutputStream getOutputStream()//返回URL的输出流, 用于写入资源。
	 ...
 

	 	 
 	 	

  
 