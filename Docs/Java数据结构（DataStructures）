Java 数据结构
在Java中的数据结构主要包括以下几种接口和类：

    枚举（Enumeration）  [ɪˌnju:mə'reɪʃn]
    位集合（BitSet）
    向量（Vector）
    栈（Stack）
    字典（Dictionary）
    哈希表（Hashtable）
    属性（Properties）

在Java2中引入了一种新的框架-集合框架(Collection)   


枚举（The Enumeration）接口定义了一种从数据结构中取回连续元素的方式。 虽然它本身不属于数据结构,但它在其他数据结构的范畴里应用很广。
Enumeration接口中定义了一些方法，通过这些方法可以枚举（一次获得一个）对象集合中的元素。
这种传统接口已被迭代器取代，虽然Enumeration 还未被遗弃，但在现代代码中已经被很少使用了。尽管如此，它还是使用在诸如Vector和Properties这些传统类所定义的方法中，
除此之外，还用在一些API类，并且在应用程序中也广泛被使用。

Enumeration声明的方法：
boolean hasMoreElements( )
 	测试此枚举是否包含更多的元素。
 Object nextElement( )
 	 如果此枚举对象至少还有一个可提供的元素，则返回此枚举的下一个元素。 	
 	 
===========================
位集合（BitSet）
 位集合类实现了一组可以单独设置和清除的位或标志。
  该类在处理一组布尔值的时候非常有用，你只需要给每个值赋值一"位"，然后对位进行适当的设置或清除，就可以对布尔值进行操作了。
  
  
===========================
 向量（Vector）
 向量（Vector）类和传统数组非常相似，但是Vector的大小能根据需要动态的变化。.
  和数组一样，Vector对象的元素也能通过索引访问。
   使用Vector类最主要的好处就是在创建对象的时候不必给对象指定大小，它的大小会根据需要动态的变化。
   
========================
Java Stack 类
栈是Vector的一个子类，它实现了一个标准的后进先出的栈。
 堆栈只定义了默认构造函数，用来创建一个空栈。 堆栈除了包括由Vector定义的所有方法，也定义了自己的一些方法。
 Stack()
 
  
========================
 字典（Dictionary）
 字典（Dictionary） 类是一个抽象类，它定义了键映射到值的数据结构。
 当你想要通过特定的键而不是整数索引来访问数据的时候，这时候应该使用Dictionary。
  由于Dictionary类是抽象类，所以它只提供了键映射到值的数据结构，而没有提供特定的实现。

Dictionary 类是一个抽象类，用来存储键/值对，作用和Map类相似。

Dictionary类已经过时了。在实际开发中，你可以实现Map接口来获取键/值的存储功能。

       
  ========================
Java Map 接口
Map接口中键和值一一映射. 可以通过键来获取值。
 给定一个键和一个值，你可以将该值存储在一个Map对象. 之后，你可以通过键来访问对应的值。
  当访问的值不存在的时候，方法就会抛出一个NoSuchElementException异常.
 当对象的类型和Map里元素类型不兼容的时候，就会抛出一个 ClassCastException异常。
  当在不允许使用Null对象的Map中使用Null对象，会抛出一个NullPointerException 异常。
 当尝试修改一个只读的Map时，会抛出一个UnsupportedOperationException异常。
 
======================== 
  哈希表（Hashtable）      
Hashtable类提供了一种在用户定义键结构的基础上来组织数据的手段。
 例如，在地址列表的哈希表中，你可以根据邮政编码作为键来存储和排序数据，而是通过人的名字。
  哈希表键的具体含义完全取决于哈希表的使用情景和它包含的数据。
  

======================== 
 属性（Properties）
 Properties 继承于 Hashtable.Properties 类表示了一个持久的属性集.
 属性列表中每个键及其对应值都是一个字符串。
 Properties 类被许多Java类使用。
 例如，在获取环境变量时它就作为System.getProperties()方法的返回值。

























 	 
 

